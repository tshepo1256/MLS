{"version":3,"file":"static/js/601.1379cf10.chunk.js","mappings":"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","sources":["components/common/ErrorDisplay.js","components/documents/DocumentManager.js","components/documents/CaseDocuments.js","hooks/useAsync.js","../node_modules/@mui/icons-material/esm/Delete.js"],"sourcesContent":["import { Error, Refresh } from '@mui/icons-material';\nimport { Box, Button, Paper, Typography } from '@mui/material';\nimport React from 'react';\n\nconst ErrorDisplay = ({ error, onRetry, fullPage = false }) => {\n  const content = (\n    <Paper\n      sx={{\n        p: 3,\n        textAlign: 'center',\n        backgroundColor: 'error.light',\n        color: 'error.contrastText',\n      }}\n    >\n      <Error sx={{ fontSize: 48, mb: 2 }} />\n      <Typography variant=\"h6\" gutterBottom>\n        {error?.message || 'An error occurred'}\n      </Typography>\n      {error?.details && (\n        <Typography variant=\"body2\" sx={{ mb: 2 }}>\n          {error.details}\n        </Typography>\n      )}\n      {onRetry && (\n        <Button\n          variant=\"contained\"\n          startIcon={<Refresh />}\n          onClick={onRetry}\n          sx={{\n            mt: 2,\n            backgroundColor: 'error.dark',\n            '&:hover': {\n              backgroundColor: 'error.main',\n            },\n          }}\n        >\n          Try Again\n        </Button>\n      )}\n    </Paper>\n  );\n\n  if (fullPage) {\n    return (\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          minHeight: '100vh',\n          p: 3,\n        }}\n      >\n        <Box sx={{ maxWidth: 500, width: '100%' }}>{content}</Box>\n      </Box>\n    );\n  }\n\n  return content;\n};\n\nexport default ErrorDisplay; ","import {\n    Delete,\n    Description,\n    Download,\n    Share,\n    Upload\n} from '@mui/icons-material';\nimport {\n    Box,\n    Grid,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Paper,\n    Typography\n} from '@mui/material';\nimport React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { useDocumentContext } from '../../context/DocumentContext';\nimport { useAsync } from '../../hooks/useAsync';\nimport ErrorDisplay from '../common/ErrorDisplay';\nimport LoadingAnimation from '../common/LoadingAnimation';\n\nconst DocumentManager = () => {\n  const { documents, uploadDocument, deleteDocument } = useDocumentContext();\n  const [selectedDoc, setSelectedDoc] = useState(null);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [uploadError, setUploadError] = useState(null);\n\n  const { execute: handleUpload, loading: uploading } = useAsync(async (file) => {\n    try {\n      await uploadDocument(file);\n      setUploadError(null);\n    } catch (error) {\n      setUploadError(error);\n      throw error;\n    }\n  });\n\n  const { execute: handleDelete, loading: deleting } = useAsync(async (id) => {\n    await deleteDocument(id);\n  });\n\n  const onDrop = useCallback(async (acceptedFiles) => {\n    for (const file of acceptedFiles) {\n      try {\n        await handleUpload(file);\n      } catch (error) {\n        console.error('Failed to upload file:', file.name, error);\n      }\n    }\n  }, [handleUpload]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc', '.docx'],\n      'image/*': ['.png', '.jpg', '.jpeg']\n    }\n  });\n\n  // Define handler functions at component level\n  const handleDownload = useCallback((doc) => {\n    // Mock download functionality\n    console.log('Downloading:', doc.name);\n    // In a real app, this would trigger a file download\n    alert(`Downloading ${doc.name}`);\n  }, []);\n\n  const handleShare = useCallback((doc) => {\n    // Mock share functionality\n    console.log('Sharing:', doc.name);\n    // In a real app, this would open a share dialog\n    alert(`Sharing ${doc.name}`);\n  }, []);\n\n  if (uploading || deleting) {\n    return (\n      <LoadingAnimation \n        type=\"dots\" \n        message={uploading ? \"Uploading documents...\" : \"Deleting document...\"}\n      />\n    );\n  }\n\n  if (uploadError) {\n    return (\n      <ErrorDisplay \n        error={uploadError}\n        onRetry={() => setUploadError(null)}\n      />\n    );\n  }\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper\n            {...getRootProps()}\n            sx={{\n              p: 3,\n              textAlign: 'center',\n              cursor: 'pointer',\n              backgroundColor: isDragActive ? '#f0f8ff' : 'white',\n              border: isDragActive ? '2px dashed #1976d2' : '2px dashed #ccc',\n              '&:hover': {\n                border: '2px dashed #1976d2'\n              }\n            }}\n          >\n            <input {...getInputProps()} />\n            <Upload sx={{ fontSize: 40, color: 'primary.main' }} />\n            <Typography variant=\"h6\">\n              Drag and drop files here, or click to select files\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 1 }}>\n              Supported formats: PDF, DOC, DOCX, PNG, JPG, JPEG\n            </Typography>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Document Library\n            </Typography>\n            <List>\n              {documents.length === 0 ? (\n                <Typography variant=\"body1\" color=\"textSecondary\" sx={{ p: 2, textAlign: 'center' }}>\n                  No documents uploaded yet\n                </Typography>\n              ) : (\n                documents.map((doc) => (\n                  <ListItem\n                    key={doc.id}\n                    secondaryAction={\n                      <Box>\n                        <IconButton \n                          onClick={() => handleDownload(doc)}\n                          title=\"Download\"\n                        >\n                          <Download />\n                        </IconButton>\n                        <IconButton \n                          onClick={() => handleShare(doc)}\n                          title=\"Share\"\n                        >\n                          <Share />\n                        </IconButton>\n                        <IconButton \n                          onClick={() => handleDelete(doc)}\n                          title=\"Delete\"\n                          color=\"error\"\n                        >\n                          <Delete />\n                        </IconButton>\n                      </Box>\n                    }\n                  >\n                    <ListItemIcon>\n                      <Description />\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={doc.name}\n                      secondary={`Uploaded on ${new Date(doc.uploadDate).toLocaleDateString()}`}\n                    />\n                  </ListItem>\n                ))\n              )}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default DocumentManager; ","import { Box, Typography } from '@mui/material';\nimport React from 'react';\nimport DocumentManager from './DocumentManager';\n\nconst CaseDocuments = () => {\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Case Documents\n      </Typography>\n      <DocumentManager />\n    </Box>\n  );\n};\n\nexport default CaseDocuments; ","import { useCallback, useState } from 'react';\nimport { useLoading } from '../context/LoadingContext';\n\nexport const useAsync = (asyncFunction, immediate = false) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const { showLoading, hideLoading } = useLoading();\n\n  const execute = useCallback(\n    async (...params) => {\n      try {\n        showLoading();\n        setError(null);\n        const result = await asyncFunction(...params);\n        setData(result);\n        return result;\n      } catch (error) {\n        setError(error);\n        throw error;\n      } finally {\n        hideLoading();\n      }\n    },\n    [asyncFunction, showLoading, hideLoading]\n  );\n\n  return {\n    execute,\n    data,\n    error,\n    setData,\n    setError,\n  };\n}; ","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');"],"names":["_ref","error","onRetry","fullPage","content","_jsxs","Paper","sx","p","textAlign","backgroundColor","color","children","_jsx","Error","fontSize","mb","Typography","variant","gutterBottom","message","details","Button","startIcon","Refresh","onClick","mt","Box","display","justifyContent","alignItems","minHeight","maxWidth","width","DocumentManager","documents","uploadDocument","deleteDocument","useDocumentContext","selectedDoc","setSelectedDoc","useState","openDialog","setOpenDialog","uploadError","setUploadError","execute","handleUpload","loading","uploading","useAsync","async","file","handleDelete","deleting","id","onDrop","useCallback","acceptedFiles","console","name","getRootProps","getInputProps","isDragActive","useDropzone","accept","handleDownload","doc","log","alert","concat","handleShare","LoadingAnimation","type","ErrorDisplay","flexGrow","Grid","container","spacing","item","xs","_objectSpread","cursor","border","Upload","List","length","map","ListItem","secondaryAction","IconButton","title","Download","Share","Delete","ListItemIcon","Description","ListItemText","primary","secondary","Date","uploadDate","toLocaleDateString","CaseDocuments","asyncFunction","data","setData","setError","showLoading","hideLoading","useLoading","result","arguments","createSvgIcon","d"],"sourceRoot":""}