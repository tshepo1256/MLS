{"version":3,"file":"static/js/266.83510896.chunk.js","mappings":"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","sources":["components/matters/MatterForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  MenuItem,\n  Stepper,\n  Step,\n  StepLabel,\n  Divider,\n  Chip,\n  FormControl,\n  InputLabel,\n  Select,\n  Autocomplete,\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\nconst caseTypes = [\n  'Civil Litigation',\n  'Criminal Defense',\n  'Family Law',\n  'Corporate Law',\n  'Real Estate',\n  'Intellectual Property',\n  'Employment Law',\n  'Immigration',\n];\n\nconst priorityLevels = [\n  { value: 'high', label: 'High Priority', color: '#FF6B6B' },\n  { value: 'medium', label: 'Medium Priority', color: '#FFA07A' },\n  { value: 'low', label: 'Low Priority', color: '#98FB98' },\n];\n\nconst mockTeamMembers = [\n  { id: 1, name: 'Emma Wilson', role: 'Associate Attorney' },\n  { id: 2, name: 'James Parker', role: 'Legal Assistant' },\n  { id: 3, name: 'Sophie Chen', role: 'Paralegal' },\n  { id: 4, name: 'Maria Garcia', role: 'Secretary' },\n];\n\nconst steps = ['Basic Information', 'Team Assignment', 'Timeline & Milestones', 'Documents & Notes'];\n\nconst MatterForm = () => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [formData, setFormData] = useState({\n    title: '',\n    caseNumber: '',\n    caseType: '',\n    priority: '',\n    description: '',\n    startDate: null,\n    estimatedEndDate: null,\n    assignedTeam: [],\n    leadAttorney: null,\n    milestones: [\n      { title: '', dueDate: null, assignee: null, description: '' }\n    ],\n    clientInfo: {\n      name: '',\n      email: '',\n      phone: '',\n    },\n    documents: [],\n    notes: '',\n  });\n\n  const handleNext = () => {\n    setActiveStep((prev) => prev + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prev) => prev - 1);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('Form submitted:', formData);\n  };\n\n  const renderStepContent = (step) => {\n    switch (step) {\n      case 0:\n        return (\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Case Title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Case Number\"\n                value={formData.caseNumber}\n                onChange={(e) => setFormData({ ...formData, caseNumber: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel>Case Type</InputLabel>\n                <Select\n                  value={formData.caseType}\n                  onChange={(e) => setFormData({ ...formData, caseType: e.target.value })}\n                  label=\"Case Type\"\n                >\n                  {caseTypes.map((type) => (\n                    <MenuItem key={type} value={type}>\n                      {type}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel>Priority</InputLabel>\n                <Select\n                  value={formData.priority}\n                  onChange={(e) => setFormData({ ...formData, priority: e.target.value })}\n                  label=\"Priority\"\n                >\n                  {priorityLevels.map((priority) => (\n                    <MenuItem key={priority.value} value={priority.value}>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Box\n                          sx={{\n                            width: 12,\n                            height: 12,\n                            borderRadius: '50%',\n                            backgroundColor: priority.color,\n                            mr: 1,\n                          }}\n                        />\n                        {priority.label}\n                      </Box>\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={4}\n                label=\"Case Description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <DatePicker\n                label=\"Start Date\"\n                value={formData.startDate}\n                onChange={(date) => setFormData({ ...formData, startDate: date })}\n                renderInput={(params) => <TextField {...params} fullWidth />}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <DatePicker\n                label=\"Estimated End Date\"\n                value={formData.estimatedEndDate}\n                onChange={(date) => setFormData({ ...formData, estimatedEndDate: date })}\n                renderInput={(params) => <TextField {...params} fullWidth />}\n                slotProps={{ textField: { fullWidth: true } }}\n              />\n            </Grid>\n          </Grid>\n        );\n\n      case 1:\n        return (\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Autocomplete\n                value={formData.leadAttorney}\n                onChange={(_, newValue) => setFormData({ ...formData, leadAttorney: newValue })}\n                options={mockTeamMembers}\n                getOptionLabel={(option) => `${option.name} (${option.role})`}\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Lead Attorney\" required />\n                )}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Autocomplete\n                multiple\n                value={formData.assignedTeam}\n                onChange={(_, newValue) => setFormData({ ...formData, assignedTeam: newValue })}\n                options={mockTeamMembers}\n                getOptionLabel={(option) => `${option.name} (${option.role})`}\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Assign Team Members\" />\n                )}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Chip\n                      label={`${option.name} (${option.role})`}\n                      {...getTagProps({ index })}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                    />\n                  ))\n                }\n              />\n            </Grid>\n          </Grid>\n        );\n\n      case 2:\n        return (\n          <Grid container spacing={3}>\n            {formData.milestones.map((milestone, index) => (\n              <React.Fragment key={index}>\n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle1\" gutterBottom>\n                    Milestone {index + 1}\n                  </Typography>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Milestone Title\"\n                    value={milestone.title}\n                    onChange={(e) => {\n                      const newMilestones = [...formData.milestones];\n                      newMilestones[index].title = e.target.value;\n                      setFormData({ ...formData, milestones: newMilestones });\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <DatePicker\n                    label=\"Due Date\"\n                    value={milestone.dueDate}\n                    onChange={(date) => {\n                      const newMilestones = [...formData.milestones];\n                      newMilestones[index].dueDate = date;\n                      setFormData({ ...formData, milestones: newMilestones });\n                    }}\n                    renderInput={(params) => <TextField {...params} fullWidth />}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Autocomplete\n                    value={milestone.assignee}\n                    onChange={(_, newValue) => {\n                      const newMilestones = [...formData.milestones];\n                      newMilestones[index].assignee = newValue;\n                      setFormData({ ...formData, milestones: newMilestones });\n                    }}\n                    options={mockTeamMembers}\n                    getOptionLabel={(option) => `${option.name} (${option.role})`}\n                    renderInput={(params) => (\n                      <TextField {...params} label=\"Assignee\" />\n                    )}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    multiline\n                    rows={2}\n                    label=\"Milestone Description\"\n                    value={milestone.description}\n                    onChange={(e) => {\n                      const newMilestones = [...formData.milestones];\n                      newMilestones[index].description = e.target.value;\n                      setFormData({ ...formData, milestones: newMilestones });\n                    }}\n                  />\n                </Grid>\n                {index < formData.milestones.length - 1 && (\n                  <Grid item xs={12}>\n                    <Divider sx={{ my: 2 }} />\n                  </Grid>\n                )}\n              </React.Fragment>\n            ))}\n            <Grid item xs={12}>\n              <Button\n                variant=\"outlined\"\n                onClick={() =>\n                  setFormData({\n                    ...formData,\n                    milestones: [\n                      ...formData.milestones,\n                      { title: '', dueDate: null, assignee: null, description: '' },\n                    ],\n                  })\n                }\n              >\n                Add Milestone\n              </Button>\n            </Grid>\n          </Grid>\n        );\n\n      case 3:\n        return (\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={4}\n                label=\"Initial Case Notes\"\n                value={formData.notes}\n                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                placeholder=\"Add any initial notes, observations, or special instructions for the case...\"\n              />\n            </Grid>\n            {/* Add document upload functionality here */}\n          </Grid>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom sx={{ mb: 4 }}>\n        Create New Case\n      </Typography>\n\n      <Card sx={{ p: 3 }}>\n        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n\n        <form onSubmit={handleSubmit}>\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            {renderStepContent(activeStep)}\n          </LocalizationProvider>\n\n          <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>\n            {activeStep > 0 && (\n              <Button onClick={handleBack} sx={{ mr: 1 }}>\n                Back\n              </Button>\n            )}\n            <Button\n              variant=\"contained\"\n              onClick={activeStep === steps.length - 1 ? handleSubmit : handleNext}\n            >\n              {activeStep === steps.length - 1 ? 'Create Case' : 'Next'}\n            </Button>\n          </Box>\n        </form>\n      </Card>\n    </Box>\n  );\n};\n\nexport default MatterForm; "],"names":["caseTypes","priorityLevels","value","label","color","mockTeamMembers","id","name","role","steps","MatterForm","activeStep","setActiveStep","useState","formData","setFormData","title","caseNumber","caseType","priority","description","startDate","estimatedEndDate","assignedTeam","leadAttorney","milestones","dueDate","assignee","clientInfo","email","phone","documents","notes","handleSubmit","e","preventDefault","console","log","_jsxs","Box","sx","p","children","_jsx","Typography","variant","gutterBottom","mb","Card","Stepper","map","Step","StepLabel","onSubmit","LocalizationProvider","dateAdapter","AdapterDateFns","step","Grid","container","spacing","item","xs","md","TextField","fullWidth","onChange","_objectSpread","target","required","FormControl","InputLabel","Select","type","MenuItem","display","alignItems","width","height","borderRadius","backgroundColor","mr","multiline","rows","DatePicker","date","renderInput","params","slotProps","textField","Autocomplete","_","newValue","options","getOptionLabel","option","concat","multiple","renderTags","getTagProps","index","Chip","milestone","React","newMilestones","length","Divider","my","Button","onClick","placeholder","renderStepContent","justifyContent","mt","handleBack","prev","handleNext"],"sourceRoot":""}